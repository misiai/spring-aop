<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--1.创建目标类-->
    <bean id="userService" class="com.misiai.d_aspect.a_xml.UserServiceImpl"/>

    <!--2.创建切面类，即通知-->
    <bean id="aspect" class="com.misiai.d_aspect.a_xml.MyAspect"/>

    <!--3.aop编程-->
    <aop:config>
        <aop:pointcut id="pointCut" expression="execution(* com.misiai.d_aspect.a_xml.UserServiceImpl.*(..))"/>
        <aop:aspect ref="aspect">


            <!--
            3.1前置通知
            <aop:before method=""pointcut=""pointcut-ref=""/>
            method：通知，及方法名
            pointcut：切入点表达式，此表达式只能当前通知使用。
            pointcut-ref：切入点引用，可以与其他通知共享切入点。
            -->
            <!--<aop:before method="before" pointcut-ref="pointCut"/>-->
            <!--3.2后置返回通知-->
            <!--<aop:after-returning method="afterReturning" pointcut-ref="pointCut" returning="ret"/>-->
            <!--3.3后置通知-->
            <!--<aop:after method="after" pointcut-ref="pointCut"/>-->
            <!--3.4环绕通知
            通知方法格式：public Object around（ProceedingJoinPoint joinPoint）throws Throwable{
            返回值类型：Object
            方法名：任意
            参数：org.aspectj.lang.ProceedingJoinPoint
            抛出异常
            执行目标方法：Object obi=joinPoint.proceed();
            -->
            <aop:around method="around" pointcut-ref="pointCut"/>
            <!--3.5 抛出异常-->
            <aop:after-throwing method="afterThrowing" pointcut-ref="pointCut" throwing="throwable"/>
        </aop:aspect>
    </aop:config>

</beans>